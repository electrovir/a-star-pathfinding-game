{"version":3,"sources":["art/spritesheet.png","art/theDude.png","art/TurretR.png","scripts/utils.js","GameClasses.js","scripts/Pathfinding.js","components/GameCanvas.js","GameInterface.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","scripts_utils","_prt","_callee","to","regenerator_default","a","wrap","_context","prev","next","ms","Promise","r","setTimeout","abrupt","sent","stop","this","_randInt","b","Math","floor","random","_getRandomGridBox","grid","destBox","key","console","log","_this","nDirections","0","1","2","3","5","6","7","8","config","_getRandomTypeConstant","gridTypes","type","const","passable","friction","damage","color","sprite","x","y","width","height","Number","toFixed","char","charTypes","spriteSet","down","up","left","right","turret","turretTypes","GameClasses","_ref","game","utils","GridBox","_ref2","gX","gY","origSprite","Object","assign","_resetSprite","gScore","hScore","fScore","parentZone","_setParent","box","_clearParent","isSelected","_select","_deselect","isSource","isNextSource","_setNextSource","_setSource","heroPosition","_clearSource","isRaySource","_setRaySource","isDestination","isNextDestination","_setNextDestination","_setDestination","heroDestination","_clearDestination","_setNearestState","_setNeighborState","_getNeighbors","neighbors","nPosition","i","j","neighbor","gridHash","concat","direction","push","CharBox","_ref3","_this2","_setDirection","dir","NORTH","SOUTH","EAST","WEST","Pathfinding","PathFinder","classCallCheck","_findPath","allDone","_resetGrid","findingPath","_iterations","_nextNearest","opened","closed","path","_iteratePath","_finishPath","asyncToGenerator","mark","lowestScore","inOpened","forEach","heroTweenA","_tweenHero","find","filter","c","_calcGScore","_calcFScore","showPath","_calcHScore","length","abs","score","TWEEN","require","gridSprites","Image","src","heroSprites","GameCanvas","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","mode","props","componentDidMount","showScore","_initializeGameCanvas","canvas","refs","g_canvas","ctx","getContext","_initGrid","rows","cols","t_width","t_height","hero","_initHero","addEventListener","e","gCoords","ceil","clientX","clientY","gridKey","boxClicked","PF","mPosition","window","isPaused","_renderLoop","cancelAnimationFrame","frameId","_ts","_drawRender","update","requestAnimationFrame","clearRect","_drawGrid","_drawBox","_drawRay","coords","radians","atan2","strokeStyle","beginPath","moveTo","lineTo","stroke","_detectCollisions","hitBoxes","currX","cos","currY","sin","indexOf","fillRect","drawImage","font","fillStyle","fillText","values","gridTypeConfig","gridBox","Classes","objectSpread","nextSrc","nextDest","_this$heroPosition","heroConfig","tween","Tween","start","map","split","coord","Pathfinder","assertThisInitialized","react_default","createElement","Fragment","id","ref","Component","GameInterface","style","display","justifyContent","alignItems","components_GameCanvas","Boolean","location","hostname","match","ReactDOM","render","src_GameInterface","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e243119d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spritesheet.f9ce9100.png\";","module.exports = __webpack_public_path__ + \"static/media/theDude.7e8a22ae.png\";","module.exports = __webpack_public_path__ + \"static/media/TurretR.fb7e1ad9.png\";","class Utils {\r\n   _prt = async to => await ((ms => new Promise(r => setTimeout(r, ms)))(to));\r\n   _randInt = (a, b) => Math.floor(Math.random() * (b - a) + a);\r\n   _getRandomGridBox = grid => {\r\n      let destBox = null;\r\n\r\n      for (let key in grid) {\r\n         console.log(key)\r\n         if (this._randInt(0, 100) > 70) destBox = grid[key];\r\n      }\r\n\r\n      if (!destBox) return this._getRandomGridBox();\r\n      \r\n      return destBox\r\n   }\r\n   nDirections = { 0: 'NORTH_WEST', 1: 'WEST', 2: 'SOUTH_WEST', 3: 'NORTH', 5: 'SOUTH', 6: 'NORTH_EAST', 7: 'EAST', 8: 'SOUTH_EAST' };\r\n   config = {\r\n      grid: {\r\n         _getRandomTypeConstant: () => ([0, 0, 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 2, 0, 0][(Math.floor(Math.random() * (20 - 1)) + 1)]),\r\n         gridTypes: {\r\n            0: {\r\n               type: 'walkable',\r\n               const: 0,\r\n               passable: true,\r\n               friction: 0,\r\n               damage: 0,\r\n               color: '#d2d2d2',\r\n               sprite: { x: 0, y: 0, width: 50, height: 50, type: 0 }\r\n            },\r\n            1: {\r\n               type: 'walkableSlow',\r\n               const: 1,\r\n               passable: true,\r\n               friction: Number((Math.random() * (.8 - .3) + .3).toFixed(2)),\r\n               damage: 0,\r\n               color: '#80cccc',\r\n               sprite: [\r\n                  { x: 100, y: 0, width: 50, height: 50, type: 1 },\r\n                  { x: 100, y: 50, width: 50, height: 50, type: 1 },\r\n                  { x: 100, y: 100, width: 50, height: 50, type: 1 }\r\n               ][this._randInt(1, 3) - 1]\r\n            },\r\n            2: {\r\n               type: 'blocked',\r\n               const: 2,\r\n               passable: false,\r\n               friction: 0,\r\n               damage: 0,\r\n               color: '#7a7a7a',\r\n               sprite: [\r\n                  { x: 50, y: 0, width: 50, height: 50, type: 2 },\r\n                  { x: 50, y: 50, width: 50, height: 50, type: 2 },\r\n                  { x: 50, y: 100, width: 50, height: 50, type: 2 }\r\n               ][this._randInt(1, 3) - 1]\r\n            },\r\n            3: {\r\n               type: 'damage',\r\n               passable: true,\r\n               const: 3,\r\n               friction: Number((Math.random() * (.8 - .3) + .3).toFixed(2)),\r\n               damage: Number((Math.random() * (.75 - .25) + .25).toFixed(2)),\r\n               color: '#c4341b',\r\n               sprite: [\r\n                  { x: 150, y: 0, width: 50, height: 50, type: 3 },\r\n                  { x: 150, y: 50, width: 50, height: 50, type: 3 },\r\n                  { x: 150, y: 100, width: 50, height: 50, type: 3 }\r\n               ][this._randInt(1, 3) - 1]\r\n            }\r\n         }\r\n      },\r\n      char: {\r\n         charTypes: {\r\n            0: {\r\n               type: 'ninja',\r\n               const: 0,\r\n               width: 50,\r\n               height: 50,\r\n               spriteSet: {\r\n                  down: { x: 0, y: 0, width: 56, height: 72 },\r\n                  up: { x: 0, y: 74, width: 53, height: 72 },\r\n                  left: { x: 0, y: 146, width: 53, height: 72 },\r\n                  right: { x: 0, y: 219, width: 53, height: 72 }\r\n               }\r\n            }\r\n         }\r\n      },\r\n      turret: {\r\n         turretTypes: {\r\n            0: {\r\n               type: 'gunner',\r\n               const: 0,\r\n               width: 50,\r\n               height: 50,\r\n               sprite: { x: 0, y: 0, width: 100, height: 50 }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nexport default new Utils();","export default ({ game, utils }) => ({\r\n   GridBox: function GridBox({ key, gX, gY, x, y, width, height, type, passable, friction, damage, color, sprite }) {\r\n      this.key = key;\r\n      this.gX = gX;\r\n      this.gY = gY;\r\n      this.x = x || 0;\r\n      this.y = y || 0;\r\n      this.width = width || 0;\r\n      this.height = height || 0;\r\n\r\n      this.type = type;\r\n      this.passable = passable;\r\n      this.friction = friction;\r\n      this.damage = damage;\r\n      this.color = color;\r\n      this.sprite = sprite;\r\n      this.origSprite = Object.assign({}, sprite);\r\n      this._resetSprite = () => this.sprite = this.origSprite;\r\n\r\n      this.gScore = 0;\r\n      this.hScore = 0;\r\n      this.fScore = 0;\r\n\r\n      this.parentZone = {};\r\n      this._setParent = box => this.parentZone = box;\r\n      this._clearParent = () => this.parentZone = null;\r\n\r\n      this.isSelected = false;\r\n      this._select = () => this.isSelected = true;\r\n      this._deselect = () => this.isSelected = false;\r\n\r\n      this.isSource = false;\r\n      this.isNextSource = false;\r\n      this._setNextSource = () => this.isNextSource = true;\r\n      this._setSource = () => {\r\n         this.isSource = true;\r\n         this.sprite = { x: 0, y: 50, width: 50, height: 50, type: 0 };\r\n         game.heroPosition = this;\r\n         if (this.isNextSource) this.isNextSource = false;\r\n      }\r\n      this._clearSource = () => {\r\n         this.isSource = false;\r\n         this.sprite = this.origSprite;\r\n         delete game.heroPosition;\r\n      }\r\n\r\n      this.isRaySource = false;\r\n      this._setRaySource = () => this.isRaySource = true;\r\n\r\n      this.isDestination = false;\r\n      this.isNextDestination = false;\r\n      this._setNextDestination = () => this.isNextDestination = true;\r\n      this._setDestination = () => {\r\n         this.isDestination = true;\r\n         this.sprite = { x: 0, y: 100, width: 50, height: 50, type: 0 };\r\n         game.heroDestination = this;\r\n         if (this.isNextDestination) this.isNextDestination = false;\r\n      }\r\n      this._clearDestination = () => {\r\n         this.isDestination = false;\r\n         this.sprite = this.origSprite;\r\n         delete game.heroDestination;\r\n      }\r\n\r\n      this._setNearestState = () => !this.isDestination ? this.sprite = { x: 0, y: 150, width: 50, height: 50, type: 0 } : null;\r\n      this._setNeighborState = () => !this.isDestination ? this.sprite = { x: 0, y: 200, width: 50, height: 50, type: 0 } : null;\r\n      this._getNeighbors = () => {\r\n         let { gX, gY } = this;\r\n         let neighbors = [];\r\n         let nPosition = 0;\r\n         \r\n         for (let i = gX - 1; i <= gX + 1; i++) {\r\n            for (let j = gY - 1; j <= gY + 1; j++) {\r\n               if ((i < 0 || j < 0 || i > 15 || j > 11) || (i === this.gX && j === this.gY)) { nPosition++; continue; }\r\n               else {\r\n                  let neighbor = game.gridHash[`${i}-${j}`];\r\n                  if (nPosition === 0 || nPosition === 2 || nPosition === 6 || nPosition === 8) { nPosition++; continue; };\r\n                  neighbor.direction = utils.nDirections[nPosition]\r\n                  neighbors.push(neighbor);\r\n                  nPosition++;\r\n               }\r\n            }\r\n         }\r\n         return neighbors\r\n      }\r\n   },\r\n   CharBox: function CharBox({ x, y, width, height, type, color, sprite, spriteSet }) {\r\n      this.x = x || 0;\r\n      this.y = y || 0;\r\n      this.width = width || 0;\r\n      this.height = height || 0;\r\n\r\n      this.type = type;\r\n      this.color = color || 'rgba(255,255,255,0)';\r\n      this.sprite = sprite;\r\n      this.spriteSet = spriteSet;\r\n\r\n      this._setDirection = dir => {\r\n         let transDir = { NORTH: 'up', SOUTH: 'down', EAST: 'right', WEST: 'left' };\r\n         this.sprite = this.spriteSet[transDir[dir || 'SOUTH']];\r\n      }\r\n   }\r\n})","export default ({ game, utils }) => {\r\n   class PathFinder {\r\n      _findPath = () => {\r\n         if (this.allDone) game._resetGrid();\r\n         console.log('starting path')\r\n         console.log(game.heroPosition)\r\n         console.log(game.heroDestination)\r\n\r\n         game.findingPath = true;\r\n\r\n         this.allDone = false;\r\n         this._iterations = 0;\r\n         this._nextNearest = null;\r\n\r\n         this.opened = [];\r\n         this.closed = [];\r\n         this.path = {};\r\n\r\n         this.opened.push(game.heroPosition);\r\n\r\n         this._iteratePath();\r\n      }\r\n\r\n      _finishPath = () => {\r\n         game.heroDestination._setNextSource();\r\n         game.findingPath = false;\r\n\r\n         this.allDone = true;\r\n\r\n         console.log('completed path')\r\n\r\n         // if (game.mode === 'raycast') {\r\n         //    const findNext = () => {\r\n         //       let nextDestination = utils._getRandomGridBox(game.gridHash);\r\n         //       if (nextDestination.key !== game.heroDestination.key) nextDestination._setNextDestination();\r\n         //       else findNext();\r\n         //    }\r\n\r\n         //    setTimeout(() => {\r\n         //       findNext();\r\n         //       this._findPath()\r\n         //    }, 3000);\r\n         // }\r\n      }\r\n\r\n      _iteratePath = async () => {\r\n         if (this.allDone) return;\r\n\r\n         let lowestScore = -1;\r\n         let neighbors;\r\n\r\n         // wait 300ms between each iteration\r\n         await utils._prt(300)\r\n\r\n         this.opened.forEach(box => {\r\n            if (lowestScore === -1 || box.fScore < lowestScore) {\r\n               lowestScore = box.fScore;\r\n               this._nextNearest = box;\r\n            }\r\n         })\r\n\r\n         if (game.heroTweenA) game._tweenHero(this._nextNearest);\r\n         if (this._nextNearest.isDestination) {\r\n            this._finishPath();\r\n            return;\r\n         } else {\r\n            let inOpened = this.opened.find(box => box.key === this._nextNearest.key)\r\n            if (inOpened) {\r\n               this.opened = this.opened.filter(box => box.key !== this._nextNearest.key);\r\n               this.closed.push(inOpened);\r\n               this.path[inOpened.key] = inOpened;\r\n            }\r\n\r\n            neighbors = this._nextNearest._getNeighbors();\r\n            neighbors.forEach(box => {\r\n               if (box.type !== 'blocked' && !box.isSource && !this.closed.find(c => c.key === box.key)) {\r\n                  if (!this.opened.find(c => c.key === box.key)) {\r\n                     this.opened.push(box);\r\n\r\n                     if (game.showPath) {\r\n                        box._setNeighborState();\r\n                        this._nextNearest._setNearestState();\r\n                     }\r\n\r\n                     box.parentZone = this._nextNearest;\r\n\r\n                     box.gScore = (box.parentZone.gScore || 0) + this._calcGScore(box);\r\n                     box.hScore = this._calcHScore(box);\r\n                     box.fScore = this._calcFScore(box);\r\n                  } else {\r\n                     if (this._nextNearest.gScore + this._calcGScore(box) < box.gScore) {\r\n                        box.parentZone = this._nextNearest;\r\n                        box.gScore = this._nextNearest.gScore + this._calcGScore(box);\r\n                        box.fScore = this._calcFScore(box);\r\n                     }\r\n                  }\r\n               }\r\n               game.gridHash[box.key].gScore = box.gScore;\r\n            })\r\n            if (!this.opened.length || this._iterations > 800) {\r\n               this.allDone = true;\r\n            }\r\n            this._iterations++;\r\n            if (!this.allDone) this._iteratePath();\r\n         }\r\n      }\r\n\r\n      _calcFScore = box => box.gScore + box.hScore;\r\n      _calcHScore = box => ((Math.abs(box.x - game.heroDestination.x) + Math.abs(box.y - game.heroDestination.y)) * 10)\r\n      _calcGScore = box => {\r\n         let { direction, type } = box;\r\n         let score = 0;\r\n\r\n         switch (direction) {\r\n            case 'NORTH':\r\n            case 'SOUTH':\r\n            case 'WEST':\r\n            case 'EAST':\r\n               score += 10;\r\n               break;\r\n            case 'NORTH_EAST':\r\n            case 'NORTH_WEST':\r\n            case 'SOUTH_EAST':\r\n            case 'SOUTH_WEST':\r\n               score += 20;\r\n               break;\r\n            default:\r\n               break;\r\n         }\r\n\r\n         if (type === 'walkableSlow') score += 20;\r\n         if (type === 'damage') score += 40;\r\n\r\n         return score;\r\n      };\r\n   }\r\n   return new PathFinder();\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport utils from './../scripts/utils.js';\r\nimport GameClasses from './../GameClasses.js';\r\nimport Pathfinder from '../scripts/Pathfinding.js';\r\n\r\nconst TWEEN = require('@tweenjs/tween.js');\r\n\r\nconst gridSprites = new Image();\r\ngridSprites.src = require('./../art/spritesheet.png');\r\n\r\nconst heroSprites = new Image();\r\nheroSprites.src = require('./../art/theDude.png');\r\n\r\nconst turretSprites = new Image();\r\nturretSprites.src = require('./../art/TurretR.png');\r\n\r\nclass GameCanvas extends Component {\r\n   constructor() {\r\n      super()\r\n\r\n      this.PF = Pathfinder({ game: this, utils });\r\n      this.Classes = GameClasses({ game: this, utils })\r\n      \r\n      this.isPaused = false;\r\n      this.mode = null;\r\n   }\r\n\r\n   componentWillMount = () => {\r\n      this.mode = this.props.mode || 'pathfind'\r\n   }\r\n\r\n   componentDidMount = () => {\r\n      if (this.mode === 'pathfind') {\r\n         this.showPath = true;\r\n         this.showScore = true;\r\n         this.heroTweenA = true;\r\n      }\r\n      if (this.mode === 'raycast') {\r\n         this.showPath = false;\r\n         this.showScore = false;\r\n         this.heroTweenA = true;\r\n      }\r\n\r\n      this._initializeGameCanvas();\r\n   }\r\n\r\n\r\n   _initializeGameCanvas = () => {\r\n      this.canvas = this.refs.g_canvas;\r\n      this.ctx = this.canvas.getContext('2d');\r\n\r\n      // instantiate level grid objects to be draw into canvas\r\n      this.gridHash = this._initGrid({ rows: 12, cols: 16, t_width: 800, t_height: 600 });\r\n      // instantiate hero object\r\n      this.hero = this._initHero();\r\n      \r\n      // handle user input/interactions\r\n      // if (this.mode === 'pathfind') {\r\n         this.canvas.addEventListener('click', e => {\r\n            let gCoords = { x: (Math.ceil(e.clientX / 50) - 1), y: (Math.ceil(e.clientY / 50) - 1) };\r\n            let gridKey = `${gCoords.x}-${gCoords.y}`;\r\n            let boxClicked = this.gridHash[gridKey];\r\n            \r\n            if (boxClicked.type !== 'walkable') return;\r\n            if (!this.findingPath) {\r\n               if (this.heroDestination && (this.heroDestination.key !== boxClicked.key)) boxClicked._setNextDestination();\r\n               else boxClicked._setDestination();\r\n               \r\n               this.PF._findPath();\r\n            }\r\n         })\r\n      // }\r\n      if (this.mode === 'raycast') {\r\n         this.mPosition = { x: 0, y: 0 };\r\n         this.canvas.addEventListener('mousemove', e => {\r\n            this.mPosition.x = e.clientX;\r\n            this.mPosition.y = e.clientY;\r\n         })\r\n\r\n         // let raySource = utils._getRandomGridBox(this.gridHash);\r\n         \r\n         // setTimeout(() => {\r\n         //    let heroDestination = utils._getRandomGridBox(this.gridHash);\r\n         //    heroDestination._setDestination();\r\n         //    this.PF._findPath()\r\n         // }, 2000);\r\n      }\r\n      \r\n      window.addEventListener('keypress', e => {\r\n         if (e.key === 'p') {\r\n            if (this.isPaused) {\r\n               this.isPaused = false;\r\n               this._renderLoop();\r\n            }\r\n            else {\r\n               this.isPaused = true;\r\n               cancelAnimationFrame(this.frameId);\r\n            }\r\n         }\r\n      })\r\n\r\n      // commence render loop\r\n      this._renderLoop();\r\n   }\r\n\r\n   // recursively redraw canvas using requestAnimationFrame\r\n   _renderLoop = _ts => {\r\n      this._drawRender();\r\n      TWEEN.update(_ts);\r\n      this.frameId = requestAnimationFrame(this._renderLoop);\r\n   }\r\n\r\n   // clear canvas and redraw all objects according to new state\r\n   _drawRender = () => {\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      this._drawGrid();\r\n      this._drawBox('hero', this.hero);\r\n\r\n      if (this.mode === 'raycast') this._drawRay({ x: this.hero.x + 25, y: this.hero.y + 25 })\r\n   }\r\n\r\n   _drawRay = coords => {\r\n      let radians = Math.atan2(this.mPosition.y - coords.y, this.mPosition.x - coords.x);\r\n      // let r = 1100;\r\n\r\n      this.ctx.strokeStyle = '#FF0000';\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(coords.x, coords.y);\r\n      this.ctx.lineTo(this.mPosition.x, this.mPosition.y);\r\n      // this.ctx.lineTo(((this.mPosition.x + r) * Math.cos(radians)), ((this.mPosition.y + r) * Math.sin(radians)));\r\n      this.ctx.stroke();\r\n\r\n      this._detectCollisions(radians);\r\n   }\r\n\r\n   _detectCollisions = radians => {\r\n      this.hitBoxes = [];\r\n      \r\n      for (let i = 1; i < 1111; i += 15) {\r\n         let currX = ((this.hero.x + i) * Math.cos(radians));\r\n         let currY = ((this.hero.y + i) * Math.sin(radians))\r\n         let gCoords = { x: (Math.ceil(currX / 50) - 1) + this.heroPosition.gX, y: (Math.ceil(currY / 50) - 1) + this.heroPosition.gY };\r\n\r\n         if (gCoords.x < this.heroPosition.gX) {\r\n            this.hitBoxes.push(`${gCoords.x + 1}-${gCoords.y}`);\r\n            this.hitBoxes.push(`${gCoords.x + 2}-${gCoords.y}`);\r\n         } else if (gCoords.x > this.heroPosition.gX) {\r\n            this.hitBoxes.push(`${gCoords.x - 1}-${gCoords.y}`)\r\n            this.hitBoxes.push(`${gCoords.x - 2}-${gCoords.y}`);\r\n         } else {\r\n            this.hitBoxes.push(`${gCoords.x}-${gCoords.y}`)\r\n         }\r\n\r\n         if (gCoords.x > 15 || gCoords.y > 11) break;\r\n      }\r\n\r\n      this.hitBoxes = this.hitBoxes.filter((c, i, a) => a.indexOf(c) === i);\r\n      for (let key in this.gridHash) this.gridHash[key]._resetSprite();\r\n      this.hitBoxes.forEach(key => this.gridHash[key] ? this.gridHash[key]._setNeighborState() : null);\r\n      console.log(this.hitBoxes)\r\n      \r\n   }\r\n\r\n   // function to draw individual game objects to the canvas\r\n   _drawBox = (type, box) => {\r\n      if (!box) return;\r\n\r\n      switch (type) {\r\n         case 'grid':\r\n            this.ctx.fillRect(box.x, box.y, box.width, box.height);\r\n            this.ctx.drawImage(gridSprites, box.sprite.x, box.sprite.y, box.sprite.width, box.sprite.height, box.x, box.y, box.width, box.height);\r\n\r\n            if (box.gScore && this.showScore) {\r\n               this.ctx.font = '20px Arial';\r\n               this.ctx.fillStyle = box.type === 'walkableSlow' ? '#603F39' : box.type === 'damage' ? '#F07E2D' : '#FFF';\r\n               this.ctx.fillText(box.gScore, box.x + 5, box.y + 20);\r\n            }\r\n\r\n            return;\r\n         case 'hero':\r\n            this.ctx.fillStyle = box.color;\r\n            this.ctx.fillRect(box.x, box.y, box.width, box.height);\r\n            this.ctx.drawImage(heroSprites, box.sprite.x, box.sprite.y, box.sprite.width, box.sprite.height, box.x, box.y, box.width, box.height);\r\n\r\n            return;\r\n         default:\r\n            return;\r\n      }\r\n   }\r\n\r\n   // recursively draw each grid object\r\n   _drawGrid = () => Object.values(this.gridHash).forEach(box => this._drawBox('grid', box))\r\n\r\n   // instantiate set of grid objects, randomly assigning a type\r\n   _initGrid = ({ rows, cols, t_width, t_height }) => {\r\n      let width = t_width / cols;\r\n      let height = t_height / rows;\r\n      let gridHash = {};\r\n\r\n      for (let i = 0; i <= rows - 1; i++) {\r\n         for (let j = 0; j <= cols - 1; j++) {\r\n            let key = `${j}-${i}`,\r\n               gX = j, gY = i,\r\n               x = (j * width),\r\n               y = (i * height),\r\n               gridTypeConfig = utils.config.grid.gridTypes[utils.config.grid._getRandomTypeConstant()];\r\n\r\n            let gridBox = new this.Classes.GridBox({ key, gX, gY, x, y, width, height, ...gridTypeConfig });\r\n\r\n            if (!this.heroPosition && (utils._randInt(1, 20) > 15) && gridBox.type === 'walkable') {\r\n               gridBox._setSource();\r\n               this.heroPosition = gridBox;\r\n            }\r\n\r\n            gridHash[key] = gridBox;\r\n         }\r\n      }\r\n\r\n      return gridHash;\r\n   }\r\n\r\n   // reset all grid objects to their default sprite, score and state values, then re-assign the source and destination objects respectively\r\n   _resetGrid = () => {\r\n      let nextSrc, nextDest;\r\n      console.log('resetting')\r\n\r\n      for (let coords in this.gridHash) {\r\n         let box = this.gridHash[coords];\r\n\r\n         if (box.isNextSource) nextSrc = box;\r\n         if (box.isNextDestination) nextDest = box;\r\n\r\n         box.sprite = box.origSprite;\r\n         box.gScore = 0;\r\n         box.hScore = 0;\r\n         box.fScore = 0;\r\n         box._deselect();\r\n         box._clearParent();\r\n         box._clearDestination();\r\n         box._clearSource();\r\n      }\r\n\r\n      delete this.heroPosition;\r\n      delete this.heroDestination\r\n\r\n      nextSrc._setSource()\r\n      nextDest._setDestination();\r\n   }\r\n\r\n   // instantiate hero object\r\n   _initHero = () => {\r\n      let { x, y } = this.heroPosition;\r\n      let heroConfig = utils.config.char.charTypes[0];\r\n      return new this.Classes.CharBox({ x, y, sprite: heroConfig.spriteSet.down, ...heroConfig })\r\n   }\r\n\r\n   // use tween function to draw hero's movement\r\n   _tweenHero = (destBox, path) => {\r\n      let tween;\r\n\r\n      if (destBox) {\r\n         tween = new TWEEN.Tween(this.hero).to({ x: destBox.x, y: destBox.y }, 360);\r\n         this.hero._setDirection(destBox.direction);\r\n         return tween.start();\r\n      } else {\r\n         let coords = path.map(key => key.split('-'));\r\n         coords.forEach(coord => {\r\n\r\n         tween = (new TWEEN.Tween(this.hero).to({ x: coord[0], y: coord[1] }, 320)).start()\r\n         });\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (<>\r\n         <canvas\r\n            id=\"g_canvas\"\r\n            ref=\"g_canvas\"\r\n            width=\"800\"\r\n            height=\"600\"\r\n         />\r\n      </>);\r\n   }\r\n}\r\n\r\nexport default GameCanvas;","import React, { Component } from 'react';\r\n\r\nimport GameCanvas from './components/GameCanvas';\r\n\r\nclass GameInterface extends Component {\r\n   render() {\r\n      return (\r\n         <div style={{ width: '800px', height: '600px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <GameCanvas mode='pathfind' />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default GameInterface;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameInterface from './GameInterface';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GameInterface />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}